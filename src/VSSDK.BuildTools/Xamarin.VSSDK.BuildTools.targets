<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="UpdateVsixManifest" AssemblyFile="Xamarin.VSSDK.BuildTools.dll" />

  <PropertyGroup>
    <IsVsixExtension>true</IsVsixExtension>
    <!-- Since we can augment the VSIX manifest from MSBuild, it might not be valid initially.
         Our MergeVsixManifest will perform validation always anyway. -->
    <BypassVsixValidation>true</BypassVsixValidation>
  </PropertyGroup>

  <Import Project="$(VsSDKInstall)\Microsoft.VsSDK.targets" Condition="'$(VsSDKInstall)' != ''" />

  <PropertyGroup>
    <!-- Prior to 15.0, this property wasn't set and was hardcoded to this value -->
    <VsSDKAssemblyFile Condition="'$(VsSDKAssemblyFile)' == ''">Microsoft.VsSDK.Build.Tasks.dll</VsSDKAssemblyFile>

    <!-- We replace the VSSDK property so that the built-in DetokenizeVsixManifestFile target writes to 
         a tmp file which we can use as input for our incremental build support.
         We preserve the existing value as the one we will merge to later on. -->
    <MergedIntermediateVsixManifest>$(IntermediateVsixManifest)</MergedIntermediateVsixManifest>
    <IntermediateVsixManifest>$(MergedIntermediateVsixManifest).tmp</IntermediateVsixManifest>
    <EnsureUpdatedVsixManifestDependsOn>MergeVsixManifest;ReplaceIntermediateVsixManifest</EnsureUpdatedVsixManifestDependsOn>
  </PropertyGroup>

  <!-- There is a non-trivial amount of conditions around $(DeployExtension) and $(CreateVsixContainer) and the manifest, 
       so just make sure we get a chance to run before all those that do things with the intermediate manifest. -->
  <Target Name="BeforeCopyVsixManifestFile" BeforeTargets="CopyVsixManifestFile" DependsOnTargets="$(EnsureUpdatedVsixManifestDependsOn)" />
  <Target Name="BeforeGetVsixDeploymentPath" BeforeTargets="GetVsixDeploymentPath" DependsOnTargets="$(EnsureUpdatedVsixManifestDependsOn)" />
  <Target Name="BeforeCreateVsixContainer" BeforeTargets="CreateVsixContainer" DependsOnTargets="$(EnsureUpdatedVsixManifestDependsOn)" />

  <!--
    =================================================================================
                          Merge Vsix Manifest 
    =================================================================================

    Here we take the intermediate manifest detokenized by VSSDK and augment it with 
    items from the MSBuild project, and write it out to a target manifest.
  -->
  <Target Name="MergeVsixManifest" 
          DependsOnTargets="SetVsSDKVersion" 
          Inputs="$(IntermediateVsixManifest);$(MSBuildAllProjects)" 
          Outputs="$(MergedIntermediateVsixManifest)">

    <UpdateVsixManifest
        SourceVsix="$(IntermediateVsixManifest)"
        TargetVsix="$(MergedIntermediateVsixManifest)"
        Metadata="@(VsixMetadata)"
        Installation="@(VsixInstallation)"
        InstallationTargets="@(VsixInstallationTarget)"
        Dependencies="@(VsixDependency)"
        Prerequisites="@(VsixPrerequisite)"
        Assets="@(VsixAsset)">
      <Output TaskParameter="TargetVsix" ItemName="FileWrites" />
    </UpdateVsixManifest>

    <!-- Re-read the references just in case they have changed. -->
    <ReadReferencesFromVsixManifest
      InputFile="$(MergedIntermediateVsixManifest)"
      CurrentProjectName="$(ProjectName)"
      ProjectReferences="@(_VsixManifestProjectReference)">
      <Output TaskParameter="ProjectReferencesToResolve" ItemName="_MergedVsixManifestReferencesToResolve" />
    </ReadReferencesFromVsixManifest>

    <MSBuild Projects="@(_MergedVsixManifestReferencesToResolve)"
         Properties="%(_MergedVsixManifestReferencesToResolve.SetConfiguration); %(_MergedVsixManifestReferencesToResolve.SetPlatform)"
         Targets="%(_MergedVsixManifestReferencesToResolve.OutputGroupToResolve)"
         RebaseOutputs="false">
      <Output TaskParameter="TargetOutputs" ItemName="_MergedVsixManifestResolvedReferences"/>
    </MSBuild>

    <DetokenizeVsixManifestSource
      InputFile="$(MergedIntermediateVsixManifest)"
      OutputFile="$(MergedIntermediateVsixManifest)"
      ResolvedReferences="@(_MergedVsixManifestResolvedReferences)">
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </DetokenizeVsixManifestSource>

    <!-- In 15.3+ VSSDK, the schema path is not user-settable. -->
    <ValidateVsixManifest ItemToValidate="$(MergedIntermediateVsixManifest)" Condition="'$(VsSDKVersion)' &gt;= '15.0'"  />
    <ValidateVsixManifest ItemToValidate="$(MergedIntermediateVsixManifest)" VsixSchemaPath="$(VsixSchemaPath)" Condition="'$(VsSDKVersion)' &lt; '15.0'" />
  </Target>

  <!--
    =================================================================================
                          Replace Intermediate Vsix Manifest
    =================================================================================

    This target reverts the replaced IntermediateVsixManifest property so that the 
    built-in targets run as usual
  -->
  <Target Name="ReplaceIntermediateVsixManifest">
    <ItemGroup>
      <!-- Remove the .tmp manifest in the VSIX source items used as input for the create VSIX step -->
      <VSIXSourceItem Remove="$(IntermediateVsixManifest)" />
    </ItemGroup>
    <PropertyGroup>
      <IntermediateVsixManifest>$(MergedIntermediateVsixManifest)</IntermediateVsixManifest>
    </PropertyGroup>
    <ItemGroup>
      <!-- Add the actual .vsixmanifest now. -->
      <VSIXSourceItem Include="$(MergedIntermediateVsixManifest)" />
    </ItemGroup>
  </Target>

  <Target Name="SetVsSDKVersion">
    <GetVSSDKTasksVersion AssemblyFile="$(VsSDKInstall)\$(VsSDKAssemblyFile)">
      <Output TaskParameter="Assembly" PropertyName="VsSDKTasksAssembly" />
      <Output TaskParameter="Version" PropertyName="VsSDKTasksVersion" />
    </GetVSSDKTasksVersion>
    <PropertyGroup>
      <VsSDKVersion>$(VsSDKTasksVersion.Substring(0, 4))</VsSDKVersion>
    </PropertyGroup>
  </Target>

  <!--
    =================================================================================
                          Report VSSDK Tasks Version
    =================================================================================

    It's useful to report before and after so that build failures can still report 
    the SDK in use. Also, reading the version towards the end is also useful.
  -->
  <Target Name="ReportVsSDKBefore" BeforeTargets="Build" Condition="'$(TargetFramework)' != '' and '$(VsSDKInstall)' != ''">
    <Message Importance="low" Text="Building for Dev$(Dev) ($(TargetFramework)) with $(VSSDKTasksAssembly), Version=$(VSSDKTasksVersion)" />
  </Target>
  <Target Name="ReportVsSDK" AfterTargets="Build" Condition="'$(TargetFramework)' != '' and '$(VsSDKInstall)' != ''">
    <Message Importance="normal" Text="Built for Dev$(Dev) ($(TargetFramework)) with $(VSSDKTasksAssembly), Version=$(VSSDKTasksVersion)" />
  </Target>

  <UsingTask TaskName="GetVsSDKTasksVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <AssemblyFile Required="true" />
      <Assembly Output="true" />
      <Version Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Reflection" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        Assembly tasks;
        if (!File.Exists(this.AssemblyFile))
        {
          Log.LogError("Did not find Microsoft.VsSDK.Build.Tasks loaded in AppDomain.");
          Success = false;
        }
        else
        {
          tasks = System.Reflection.Assembly.LoadFrom(this.AssemblyFile);
          this.Assembly = tasks.GetName().Name;
          this.Version = ((AssemblyFileVersionAttribute)tasks.GetCustomAttribute(typeof(AssemblyFileVersionAttribute))).Version;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>