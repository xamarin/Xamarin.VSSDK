<Project TreatAsLocalProperty="Dev;ActiveDebugFramework;TargetFrameworks;TargetFramework" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<!-- The Run dropdown doesn't set the TargetFramework, so we do it ourselves -->
		<TargetFramework Condition="'$(TargetFramework)' == '' and '$(ActiveDebugFramework)' != '' and '$(BuildingInsideVisualStudio)' == 'true'">$(ActiveDebugFramework)</TargetFramework>
  </PropertyGroup>

	<!-- 
      Overrides the $(TargetFrameworks) with a specific target to build 
      when a $(Dev) value is explicitly provided (either explicitly or via
      the ActiveDebugFramework. This allows building for each VS individually, 
      using its own VSSDK.BuildTools (since only one can be loaded in a given 
      build process). 
      
      This prevents a cross-targeting build to occur.
	  
      When doing msbuild /t:restore, the $(Dev) value would typically not be 
      provided and therefore all TFMs will be properly restored.

      NOTE: we can't just override TargetFramework, since we'd otherwise lose 
      nuget-provided imports that already happened. 

      NOTE: we don't override this value unless it was explicitly set either via 
      $(Dev) or $(ActiveDebugFramework) since otherwise we'd break restore and 
      cross-targeting build.
  -->
	<PropertyGroup Condition="'$(Dev)' != ''">
		<TargetFrameworks Condition="'$(Dev)' == '15.0'">net462</TargetFrameworks>
		<TargetFrameworks Condition="'$(Dev)' == '14.0'">net461</TargetFrameworks>
		<TargetFrameworks Condition="'$(Dev)' == '12.0'">net46</TargetFrameworks>
	</PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == '' and '$(BuildingInsideVisualStudio)' == 'true'">
    <TargetFrameworks Condition="'$(VisualStudioVersion)' == '15.0'">net462</TargetFrameworks>
    <TargetFrameworks Condition="'$(VisualStudioVersion)' == '14.0'">net461</TargetFrameworks>
    <TargetFrameworks Condition="'$(VisualStudioVersion)' == '12.0'">net46</TargetFrameworks>
  </PropertyGroup>

	<!-- Visual Studio 15.3+ supports cross-targeting and loading the right MSBuild tasks version for each inner build 
       somehow. This does not work from a batch script, however, so we require building each version independently 
       if the project cross-targets but we're building for more than one VS.
  -->
	<Target Name="EnsureNoCrossTargeting" BeforeTargets="Build"
          Condition="'$(BuildingInsideVisualStudio)' != 'true' and '$(TargetFrameworks)' != '' and '$(TargetFramework)' == '' and '$(ExcludeRestorePackageImports)' != 'true'">
		<ItemGroup>
			<TargetedVisualStudio DisplayName="Visual Studio 2013 (net46,  Dev=12.0)" Condition="$(TargetFrameworks.Contains('net46'))"  />
			<TargetedVisualStudio DisplayName="Visual Studio 2015 (net461, Dev=14.0)" Condition="$(TargetFrameworks.Contains('net461'))"  />
			<TargetedVisualStudio DisplayName="Visual Studio 2017 (net462, Dev=15.0)" Condition="$(TargetFrameworks.Contains('net462'))"  />
		</ItemGroup>

		<Error Code="XVSSDK0001" Text="In order to build cross-targeting VSIXes, each targeted IDE must be built separately. 
You can use either /p:TargetFramework or the aliased /p:Dev property to build for each.
  For Visual Studio 2013, specify: /p:Dev=12.0 or /p:TargetFramework=net46
  For Visual Studio 2015, specify: /p:Dev=14.0 or /p:TargetFramework=net461 
  For Visual Studio 2017, specify: /p:Dev=15.0 or /p:TargetFramework=net462

The current project targets: @(TargetedVisualStudio, ',')." />
	</Target>

</Project>