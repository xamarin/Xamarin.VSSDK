<Project DefaultTargets="Build" InitialTargets="_Setup" TreatAsLocalProperty="Configuration">
	<Import Project="build\corebuild.props" />

	<PropertyGroup>
		<Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
		<IntermediateOutputPath>$(RestoreOutputPath)\</IntermediateOutputPath>
		<Out Condition="'$(Out)' == ''">$(MSBuildThisFileDirectory)out</Out>
		<AdditionalProperties>Configuration=$(Configuration);PackageOutputPath=$(Out);NuGetBuildTasksPackTargets=DONT-WANT-SDK-PACK</AdditionalProperties>

		<!-- Validate/init feed before pushing. Typically, init is done once, manually. Validate takes time -->
		<SleetValidate Condition="'$(SleetValidate)' == ''">false</SleetValidate>
		<!-- Delete when https://github.com/emgarten/Sleet/issues/9 is implemented -->
		<Sleet>$(NuGetPackageRoot)sleet\1.0.1\tools\Sleet.exe</Sleet>
		<SleetConfig>$(MSBuildProjectDirectory)\sleet.json</SleetConfig>
	</PropertyGroup>

	<ItemGroup>
    <PackageReference Include="GitInfo" Version="*" PrivateAssets="all" />
    <PackageReference Include="xunit.runner.console" Version="2.3.0-beta1-build3642" />
		<PackageReference Include="Sleet" Version="1.0.1" />
		<PackageReference Include="JsonPoke.MSBuild" Version="*" />
	</ItemGroup>

	<ItemDefinitionGroup>
		<Solution>
			<AdditionalProperties>$(AdditionalProperties)</AdditionalProperties>
		</Solution>
	</ItemDefinitionGroup>

	<ItemGroup>
		<Solution Include="src\*.sln" />
	</ItemGroup>

	<Target Name="Build">
		<Message Text="Building AssemblyVersion=$(AssemblyVersion), PackageVersion=$(PackageVersion)" Importance="high" />
    <Message Text="##vso[build.updatebuildnumber]$(PackageVersion)" Importance="high" />
    
		<MSBuild Projects="@(Solution)" Targets="Build" />
	</Target>

	<Target Name="Publish">
		<Error Condition="'$(StorageAccount)' == ''" Text="StorageAccount is not set via property or environment variable. Should be the Azure Storage account name." />
		<Error Condition="'$(StorageAccessKey)' == ''" Text="StorageAccessKey is not set via property or environment variable. Should be the Azure Storage access key." />
		<Error Condition="'$(StorageContainer)' == ''" Text="StorageContainer is not set via property or environment variable. Should be the Azure Storage blob container name." />

		<Delete Files="$(SleetConfig)" Condition="Exists('$(SleetConfig)')" />
		<Copy SourceFiles="$(MSBuildProjectDirectory)\sleet.in" DestinationFiles="$(SleetConfig)" />

		<JsonPoke JsonInputPath="$(SleetConfig)"
              JValue="https://$(StorageAccount).blob.core.windows.net/$(StorageContainer)/"
              JPath="sources[0].path" />
		<JsonPoke JsonInputPath="$(SleetConfig)"
              JValue="$(StorageContainer)"
              JPath="sources[0].container" />
		<JsonPoke JsonInputPath="$(SleetConfig)"
              JValue="DefaultEndpointsProtocol=https;AccountName=$(StorageAccount);AccountKey=$(StorageAccessKey);EndpointSuffix=core.windows.net"
              JPath="sources[0].connectionString" />

		<!-- First try to determine if the feed is valid -->
		<Exec Command='"$(Sleet)" validate -s feed' Condition="'$(SleetValidate)' == 'true'" IgnoreExitCode="true">
			<Output PropertyName='ExitCode' TaskParameter='ExitCode'/>
		</Exec>
		<!-- if not, initialize it -->
		<Exec Command='"$(Sleet)" init -s feed' Condition="'$(SleetValidate)' == 'true' And $(ExitCode) != '0'" />
		<!-- Finally (force, just in case) push packages -->
		<Exec Command='"$(Sleet)" push "$(Out)" -f -s feed' />

		<Delete Files="$(SleetConfig)" Condition="Exists('$(SleetConfig)')" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<PropertyGroup>
			<XmlTestFile>$(Out)TestResults.xml</XmlTestFile>
			<HtmlTestFile>$(Out)TestResults.html</HtmlTestFile>
		</PropertyGroup>

		<ItemGroup>
			<_TestAssembly Include="test\**\bin\**\*Tests.dll" />
			<TestAssembly Include="@(_TestAssembly)"
									  Condition="$([System.String]::new('%(Filename)').EndsWith('AcceptanceTests')) == 'false' And '%(Filename)' != 'Roslyn.Services.Editor.UnitTests'" />
		</ItemGroup>

		<Exec Command="&quot;$(XunitConsolePath)&quot; &quot;@(TestAssembly, '&quot; &quot;')&quot; $(XunitOptions) -html &quot;$(HtmlTestFile)&quot; -xml &quot;$(XmlTestFile)&quot;"
			  Condition="'@(TestAssembly)' != ''">
			<Output TaskParameter="ExitCode" PropertyName="ExitCode" />
		</Exec>

		<Message Text="All tests passed, for full log see $(HtmlTestFile)" Condition="'@(TestAssembly)' != '' And '$(ExitCode)' == '0'" Importance="high" />
		<Error Text="There were test failures, for full log see $(HtmlTestFile)" Condition="'@(TestAssembly)' != '' And '$(ExitCode)' != '0'" />
	</Target>

	<Target Name="Acceptance" DependsOnTargets="Build">
		<PropertyGroup>
			<XmlTestFile>$(Out)AcceptanceResults.xml</XmlTestFile>
			<HtmlTestFile>$(Out)AcceptanceResults.html</HtmlTestFile>
		</PropertyGroup>

		<ItemGroup>
			<TestAssembly Include="test\**\bin\**\*AcceptanceTests.dll" />
		</ItemGroup>

		<Exec Command="&quot;$(XunitConsolePath)&quot; &quot;@(TestAssembly, '&quot; &quot;')&quot; $(XunitOptions) -html &quot;$(HtmlTestFile)&quot; -xml &quot;$(XmlTestFile)&quot;"
			  Condition="'@(TestAssembly)' != ''">
			<Output TaskParameter="ExitCode" PropertyName="ExitCode" />
		</Exec>

		<Message Text="All tests passed, for full log see $(HtmlTestFile)" Condition="'@(TestAssembly)' != '' And '$(ExitCode)' == '0'" Importance="high" />
		<Error Text="There were test failures, for full log see $(HtmlTestFile)" Condition="'@(TestAssembly)' != '' And '$(ExitCode)' != '0'" />
	</Target>

	<Target Name="Clean">
		<Exec Command='for /d /r . %%d in (bin,obj,.vs) do @if exist "%%d" rd /s/q "%%d"'
		      Condition="'$(OS)' == 'Windows_NT'" />
	</Target>

	<Target Name="All" DependsOnTargets="Rebuild;Test" />

	<Target Name="Rebuild" DependsOnTargets="Clean;Restore;Build" />

	<Target Name="_Restore" AfterTargets="Restore">
		<MSBuild BuildInParallel="true" Projects="@(Solution)" Targets="Restore" />
	</Target>

	<Target Name="GitVersion">
		<PropertyGroup>
			<GitBaseVersionMajor>0</GitBaseVersionMajor>
			<GitBaseVersionMinor>1</GitBaseVersionMinor>
			<GitBaseVersionPatch>0</GitBaseVersionPatch>
			<GitCommits>0</GitCommits>
		</PropertyGroup>
	</Target>

	<Target Name="_Setup" DependsOnTargets="SetVersion">
		<!-- Update AppVeyor build # to match the actual one being used -->
		<Exec Command="appveyor UpdateBuild -Version $(PackageVersion)"
			  Condition=" '$(APPVEYOR)' == 'true' And '$(target)' != 'Restore' "
			  ContinueOnError="true" />

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
	</Target>

	<Import Project="src\Version.targets" />
	<Import Project="build\corebuild.targets" />
</Project>
